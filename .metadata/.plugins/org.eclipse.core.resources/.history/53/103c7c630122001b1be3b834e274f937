package poker;

/* Explain what this class can do. */

public class Deck {

	private Card[] cards; // stores all the cards left in the deck

	/* This constructor creates a deck starting from the Ace of spaces going
	 * all the way to the King of diamonds.  */
	
	public Deck() {
		
		cards = new Card[52]; // creates a new array of 52 cards
		
		int x = 0; // counts the total number of cards
		
		/* These two loops create a new card by assigning the suite and the 
		 * card number to each location in the array. */
		
		for (int suit = 0; suit < 4; suit++) {
			
			for(int num = 1; num < 14; num++) {
								
				cards[x] = new Card(num, suit);
				
				x++; // moves the location to the next "spot"
				
			}
			
		}
		
	}
	
	/* This copy constructor creates a shallow copy of the original deck. */

	public Deck(Deck other) {

		this.cards = other.cards; // aliases a copy of the deck
		
	}

	// This method returns what position a card is at in the deck
	
	public Card getCardAt(int position) {
		
		return cards[position]; // returning the card from 0 based indexing
		
	}

	// This method returns the total number of cards in the deck
	
	public int getNumCards() {

		return cards.length; // returns the length of the cards array
		
	}
	
	/* This method re-arranges the card in the deck. */

	public void shuffle() {
		
		Card [] a, b, c; // creates two arrays that divide the cards among them
		
		c = new Card[cards.length]; // sets the size of the array
		b = new Card[cards.length / 2];// sets the size of the array
		int x = 0; // keeps track of the number of iterations through an array
				
		/* This if statement creates the size of two arrays, depending on the 
		 * size of the cards */
		
		if (cards.length % 2 != 0 ) { // sets the size if number of cards is odd
		
			a = new Card[(cards.length / 2) + 1];
			
		} else { // sets the size if number of cards is even
			
			a = new Card[cards.length / 2];
			
		}
		
		/* This loop gives half of the cards to one deck or one array and 
		 * the rest to the other deck or array of cards */
		
		for (int num = 0; num < cards.length / 2; num++) {
			
			a[num] = cards[num]; 
			b[num] = cards[num + (cards.length / 2)];
			
		}
		
		/* This loop shuffles the cards by giving the first card of the each 
		 * deck right after the other, or shuffles the cards. */
		
		for (int num = 0; num < c.length; num += 2) {
			
			c[num] = a[x];
			c[num + 1] = b[x];
			
			x++;
			
		}
		
		cards = c; // sets the array c equal to the array cards
		
	}

	/* This method moves cards to the left multiple times depending on the size 
	 * of the parameter. */
	
	public void cut(int position) {
		
		/* creates an array that contains the cards that will be moved to the
		* back of the deck */
		
		Card [] a = new Card[position]; //array of cards that will go to the end
		Card [] b = new Card[cards.length];
		
		for (int num = 0; num <= position; num++) {
			
			a[num] = cards[num];
			
		}
		
		for (int num = position; num < cards.length; num++) {
			
			b[num] = cards[num + position];
			
		}
		
		for (int num = 0; num <= position; num++) {
			
			b[num + position] = a[num];
			
		}
		
		cards = b;
 		
	}

	public Card[] deal(int numCards) {
		/* Remove the statement below and implement this method */
		throw new UnsupportedOperationException();
	}
		
}
